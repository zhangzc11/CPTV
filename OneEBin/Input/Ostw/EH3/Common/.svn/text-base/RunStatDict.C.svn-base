//
// File generated by rootcint at Sun Apr 21 16:30:16 2013

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME RunStatDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "RunStatDict.h"

#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void RunStat_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_RunStat(void *p = 0);
   static void *newArray_RunStat(Long_t size, void *p);
   static void delete_RunStat(void *p);
   static void deleteArray_RunStat(void *p);
   static void destruct_RunStat(void *p);
   static void streamer_RunStat(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::RunStat*)
   {
      ::RunStat *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::RunStat >(0);
      static ::ROOT::TGenericClassInfo 
         instance("RunStat", ::RunStat::Class_Version(), "./RunStat.h", 7,
                  typeid(::RunStat), DefineBehavior(ptr, ptr),
                  &::RunStat::Dictionary, isa_proxy, 0,
                  sizeof(::RunStat) );
      instance.SetNew(&new_RunStat);
      instance.SetNewArray(&newArray_RunStat);
      instance.SetDelete(&delete_RunStat);
      instance.SetDeleteArray(&deleteArray_RunStat);
      instance.SetDestructor(&destruct_RunStat);
      instance.SetStreamerFunc(&streamer_RunStat);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::RunStat*)
   {
      return GenerateInitInstanceLocal((::RunStat*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::RunStat*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *RunStat::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *RunStat::Class_Name()
{
   return "RunStat";
}

//______________________________________________________________________________
const char *RunStat::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::RunStat*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int RunStat::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::RunStat*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void RunStat::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::RunStat*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *RunStat::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::RunStat*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void RunStat::Streamer(TBuffer &R__b)
{
   // Stream an object of class RunStat.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      R__b >> RunNumber;
      R__b >> IsCalib;
      R__b >> Axis;
      R__b >> Source;
      R__b >> Z;
      R__b >> Site;
      R__b >> StartSec;
      R__b >> StartNano;
      R__b >> EndSec;
      R__b >> EndNano;
      R__b >> FullTime;
      R__b >> Veto1;
      R__b >> Veto2;
      R__b >> Veto3;
      R__b >> Veto4;
      R__b >> Scale1;
      R__b >> Scale2;
      R__b >> Scale3;
      R__b >> Scale4;
      R__b >> ScaleE1;
      R__b >> ScaleE2;
      R__b >> ScaleE3;
      R__b >> ScaleE4;
      R__b.CheckByteCount(R__s, R__c, RunStat::IsA());
   } else {
      R__c = R__b.WriteVersion(RunStat::IsA(), kTRUE);
      TObject::Streamer(R__b);
      R__b << RunNumber;
      R__b << IsCalib;
      R__b << Axis;
      R__b << Source;
      R__b << Z;
      R__b << Site;
      R__b << StartSec;
      R__b << StartNano;
      R__b << EndSec;
      R__b << EndNano;
      R__b << FullTime;
      R__b << Veto1;
      R__b << Veto2;
      R__b << Veto3;
      R__b << Veto4;
      R__b << Scale1;
      R__b << Scale2;
      R__b << Scale3;
      R__b << Scale4;
      R__b << ScaleE1;
      R__b << ScaleE2;
      R__b << ScaleE3;
      R__b << ScaleE4;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void RunStat::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class RunStat.
      TClass *R__cl = ::RunStat::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "RunNumber", &RunNumber);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "IsCalib", &IsCalib);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Axis", &Axis);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Source", &Source);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Z", &Z);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Site", &Site);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "StartSec", &StartSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "StartNano", &StartNano);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EndSec", &EndSec);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "EndNano", &EndNano);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "FullTime", &FullTime);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Veto1", &Veto1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Veto2", &Veto2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Veto3", &Veto3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Veto4", &Veto4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Scale1", &Scale1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Scale2", &Scale2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Scale3", &Scale3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "Scale4", &Scale4);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ScaleE1", &ScaleE1);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ScaleE2", &ScaleE2);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ScaleE3", &ScaleE3);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ScaleE4", &ScaleE4);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_RunStat(void *p) {
      return  p ? new(p) ::RunStat : new ::RunStat;
   }
   static void *newArray_RunStat(Long_t nElements, void *p) {
      return p ? new(p) ::RunStat[nElements] : new ::RunStat[nElements];
   }
   // Wrapper around operator delete
   static void delete_RunStat(void *p) {
      delete ((::RunStat*)p);
   }
   static void deleteArray_RunStat(void *p) {
      delete [] ((::RunStat*)p);
   }
   static void destruct_RunStat(void *p) {
      typedef ::RunStat current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_RunStat(TBuffer &buf, void *obj) {
      ((::RunStat*)obj)->::RunStat::Streamer(buf);
   }
} // end of namespace ROOT for class ::RunStat

/********************************************************
* RunStatDict.C
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableRunStatDict();

extern "C" void G__set_cpp_environmentRunStatDict() {
  G__add_compiledheader("TObject.h");
  G__add_compiledheader("TMemberInspector.h");
  G__add_compiledheader("RunStat.h");
  G__cpp_reset_tagtableRunStatDict();
}
#include <new>
extern "C" int G__cpp_dllrevRunStatDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* RunStat */
static int G__RunStatDict_162_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RunStat* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RunStat[n];
     } else {
       p = new((void*) gvp) RunStat[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new RunStat;
     } else {
       p = new((void*) gvp) RunStat;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RunStatDictLN_RunStat));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RunStatDict_162_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) RunStat::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RunStatDict_162_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RunStat::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RunStatDict_162_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) RunStat::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RunStatDict_162_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      RunStat::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RunStatDict_162_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((RunStat*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RunStatDict_162_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RunStat::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RunStatDict_162_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RunStat::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RunStatDict_162_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) RunStat::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__RunStatDict_162_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) RunStat::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__RunStatDict_162_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   RunStat* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new RunStat(*(RunStat*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__RunStatDictLN_RunStat));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef RunStat G__TRunStat;
static int G__RunStatDict_162_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (RunStat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((RunStat*) (soff+(sizeof(RunStat)*i)))->~G__TRunStat();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (RunStat*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((RunStat*) (soff))->~G__TRunStat();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__RunStatDict_162_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   RunStat* dest = (RunStat*) G__getstructoffset();
   *dest = *(RunStat*) libp->para[0].ref;
   const RunStat& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* RunStat */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncRunStatDict {
 public:
  G__Sizep2memfuncRunStatDict(): p(&G__Sizep2memfuncRunStatDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncRunStatDict::*p)();
};

size_t G__get_sizep2memfuncRunStatDict()
{
  G__Sizep2memfuncRunStatDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceRunStatDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__RunStatDictLN_RunStat))) {
     RunStat *G__Lderived;
     G__Lderived=(RunStat*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__RunStatDictLN_RunStat),G__get_linked_tagnum(&G__RunStatDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableRunStatDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__RunStatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RunStatDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RunStatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RunStatDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RunStatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__RunStatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__RunStatDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RunStatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__RunStatDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__RunStatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* RunStat */
static void G__setup_memvarRunStat(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__RunStatDictLN_RunStat));
   { RunStat *p; p=(RunStat*)0x1000; if (p) { }
   G__memvar_setup((void*)((long)(&p->RunNumber)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"RunNumber=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->IsCalib)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"IsCalib=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Axis)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Axis=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Source)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Source=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Z)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Z=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Site)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"Site=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->StartSec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"StartSec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->StartNano)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"StartNano=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EndSec)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"EndSec=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->EndNano)-(long)(p)),105,0,0,-1,G__defined_typename("Int_t"),-1,1,"EndNano=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->FullTime)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"FullTime=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Veto1)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Veto1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Veto2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Veto2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Veto3)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Veto3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Veto4)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Veto4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Scale1)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Scale1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Scale2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Scale2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Scale3)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Scale3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->Scale4)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"Scale4=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ScaleE1)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ScaleE1=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ScaleE2)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ScaleE2=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ScaleE3)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ScaleE3=",0,(char*)NULL);
   G__memvar_setup((void*)((long)(&p->ScaleE4)-(long)(p)),100,0,0,-1,G__defined_typename("Double_t"),-1,1,"ScaleE4=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__RunStatDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarRunStatDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncRunStat(void) {
   /* RunStat */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__RunStatDictLN_RunStat));
   G__memfunc_setup("RunStat",721,G__RunStatDict_162_0_1, 105, G__get_linked_tagnum(&G__RunStatDictLN_RunStat), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__RunStatDict_162_0_2, 85, G__get_linked_tagnum(&G__RunStatDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&RunStat::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__RunStatDict_162_0_3, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RunStat::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__RunStatDict_162_0_4, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&RunStat::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__RunStatDict_162_0_5, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&RunStat::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__RunStatDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__RunStatDict_162_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__RunStatDict_162_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RunStat::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__RunStatDict_162_0_11, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RunStat::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__RunStatDict_162_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&RunStat::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__RunStatDict_162_0_13, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&RunStat::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("RunStat", 721, G__RunStatDict_162_0_14, (int) ('i'), G__get_linked_tagnum(&G__RunStatDictLN_RunStat), -1, 0, 1, 1, 1, 0, "u 'RunStat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~RunStat", 847, G__RunStatDict_162_0_15, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__RunStatDict_162_0_16, (int) ('u'), G__get_linked_tagnum(&G__RunStatDictLN_RunStat), -1, 1, 1, 1, 1, 0, "u 'RunStat' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncRunStatDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalRunStatDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcRunStatDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__RunStatDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__RunStatDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__RunStatDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__RunStatDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__RunStatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__RunStatDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RunStatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__RunStatDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__RunStatDictLN_RunStat = { "RunStat" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableRunStatDict() {
  G__RunStatDictLN_TClass.tagnum = -1 ;
  G__RunStatDictLN_TBuffer.tagnum = -1 ;
  G__RunStatDictLN_TMemberInspector.tagnum = -1 ;
  G__RunStatDictLN_TObject.tagnum = -1 ;
  G__RunStatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__RunStatDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RunStatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__RunStatDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__RunStatDictLN_RunStat.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableRunStatDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__RunStatDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__RunStatDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__RunStatDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__RunStatDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__RunStatDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__RunStatDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__RunStatDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__RunStatDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__RunStatDictLN_RunStat),sizeof(RunStat),-1,29952,"Run Statistics",G__setup_memvarRunStat,G__setup_memfuncRunStat);
}
extern "C" void G__cpp_setupRunStatDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupRunStatDict()");
  G__set_cpp_environmentRunStatDict();
  G__cpp_setup_tagtableRunStatDict();

  G__cpp_setup_inheritanceRunStatDict();

  G__cpp_setup_typetableRunStatDict();

  G__cpp_setup_memvarRunStatDict();

  G__cpp_setup_memfuncRunStatDict();
  G__cpp_setup_globalRunStatDict();
  G__cpp_setup_funcRunStatDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncRunStatDict();
  return;
}
class G__cpp_setup_initRunStatDict {
  public:
    G__cpp_setup_initRunStatDict() { G__add_setup_func("RunStatDict",(G__incsetup)(&G__cpp_setupRunStatDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initRunStatDict() { G__remove_setup_func("RunStatDict"); }
};
G__cpp_setup_initRunStatDict G__cpp_setup_initializerRunStatDict;

